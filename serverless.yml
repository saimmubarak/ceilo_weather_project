org: saimserverless
service: serverless-crud
frameworkVersion: '4'

plugins:
  - serverless-offline
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.11
  region: eu-north-1

  environment:
    TABLE_NAME: users       #users table used
    SNS_TOPIC_ARN:
      Ref: WeatherAlertsTopic

    SQS_URL:
      Ref: GetWeatherQueue

    RECEIVE_QUEUE_URL:
      Ref: ProcessedWeatherQueue



  logRetentionInDays: 7

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*

        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource: "*"

        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/users
            - arn:aws:dynamodb:${self:provider.region}:*:table/weather

        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${sls:stage}-getWeather

        #invoke get_weather_data_queue
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${sls:stage}-weatherQueue

        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - arn:aws:s3:::profilepicusers
            - arn:aws:s3:::profilepicusers/*

        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Ref: WeatherAlertsTopic

functions:


  createUser:
    handler: weather_crud/create_user.lambda_handler
    events:
      - httpApi:
          path: /create
          method: post

  readUser:
    handler: weather_crud/read_user.lambda_handler
    events:
      - httpApi:
          path: /read
          method: get

  updateUser:
    handler: weather_crud/update_user.lambda_handler
    events:
      - httpApi:
          path: /update
          method: put

  deleteUser:
    handler: weather_crud/delete_user.lambda_handler
    events:
      - httpApi:
          path: /delete
          method: delete

  getWeather:
    handler: weather_crud/get_weather.lambda_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GetWeatherQueue
              - Arn
          #batchSize: 10


  streamHandler:
    handler: stream_triggers/stream_handler.lambda_handler
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:eu-north-1:392894084273:table/weather/stream/2025-07-18T11:41:02.530

resources:
  Resources:
    WeatherAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: weather-alerts

    GetWeatherQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: get-weather-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true

    ProcessedWeatherQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: processed-weather-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true


#    # Enabling backup for weather table
#    # Enable Point In Time Recovery
#    UpdateWeatherTableBackup:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: weather
#        PointInTimeRecoverySpecification:
#          PointInTimeRecoveryEnabled: true